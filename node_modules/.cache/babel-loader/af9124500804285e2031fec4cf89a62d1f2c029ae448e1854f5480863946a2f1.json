{"ast":null,"code":"import axios from 'axios';\n\n// TODO: Remove this temporary API key before pushing to git\nconst ELEVENLABS_API_KEY = 'sk_80ce442c7e01d11275750b6757b614a8ee73f724dcb74fe6';\nconst ELEVENLABS_API_URL = 'https://api.elevenlabs.io/v1';\nclass ElevenLabsService {\n  constructor() {\n    this.apiKey = null;\n    if (!ELEVENLABS_API_KEY) {\n      throw new Error('ElevenLabs API key is not configured');\n    }\n    this.apiKey = ELEVENLABS_API_KEY;\n  }\n  static getInstance() {\n    if (!ElevenLabsService.instance) {\n      ElevenLabsService.instance = new ElevenLabsService();\n    }\n    return ElevenLabsService.instance;\n  }\n  async textToSpeech({\n    text,\n    voiceId,\n    modelId = 'eleven_monolingual_v1',\n    voiceSettings = {\n      stability: 0.5,\n      similarity_boost: 0.75,\n      style: 0.0,\n      use_speaker_boost: true\n    }\n  }) {\n    try {\n      const response = await axios.post(`${ELEVENLABS_API_URL}/text-to-speech/${voiceId}`, {\n        text,\n        model_id: modelId,\n        voice_settings: voiceSettings\n      }, {\n        headers: {\n          'Accept': 'audio/mpeg',\n          'xi-api-key': this.apiKey,\n          'Content-Type': 'application/json'\n        },\n        responseType: 'arraybuffer'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error in text-to-speech conversion:', error);\n      throw error;\n    }\n  }\n  async getVoices() {\n    try {\n      const response = await axios.get(`${ELEVENLABS_API_URL}/voices`, {\n        headers: {\n          'xi-api-key': this.apiKey\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching voices:', error);\n      throw error;\n    }\n  }\n}\nElevenLabsService.instance = null;\nexport default ElevenLabsService;","map":{"version":3,"names":["axios","ELEVENLABS_API_KEY","ELEVENLABS_API_URL","ElevenLabsService","constructor","apiKey","Error","getInstance","instance","textToSpeech","text","voiceId","modelId","voiceSettings","stability","similarity_boost","style","use_speaker_boost","response","post","model_id","voice_settings","headers","responseType","data","error","console","getVoices","get"],"sources":["C:/Users/hp/Desktop/NEXUS.DAWN/src/services/ElevenLabsService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// TODO: Remove this temporary API key before pushing to git\r\nconst ELEVENLABS_API_KEY = 'sk_80ce442c7e01d11275750b6757b614a8ee73f724dcb74fe6';\r\nconst ELEVENLABS_API_URL = 'https://api.elevenlabs.io/v1';\r\n\r\nclass ElevenLabsService {\r\n  static instance = null;\r\n  apiKey = null;\r\n\r\n  constructor() {\r\n    if (!ELEVENLABS_API_KEY) {\r\n      throw new Error('ElevenLabs API key is not configured');\r\n    }\r\n    this.apiKey = ELEVENLABS_API_KEY;\r\n  }\r\n\r\n  static getInstance() {\r\n    if (!ElevenLabsService.instance) {\r\n      ElevenLabsService.instance = new ElevenLabsService();\r\n    }\r\n    return ElevenLabsService.instance;\r\n  }\r\n\r\n  async textToSpeech({ text, voiceId, modelId = 'eleven_monolingual_v1', voiceSettings = {\r\n    stability: 0.5,\r\n    similarity_boost: 0.75,\r\n    style: 0.0,\r\n    use_speaker_boost: true\r\n  }}) {\r\n    try {\r\n      const response = await axios.post(\r\n        `${ELEVENLABS_API_URL}/text-to-speech/${voiceId}`,\r\n        {\r\n          text,\r\n          model_id: modelId,\r\n          voice_settings: voiceSettings\r\n        },\r\n        {\r\n          headers: {\r\n            'Accept': 'audio/mpeg',\r\n            'xi-api-key': this.apiKey,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          responseType: 'arraybuffer'\r\n        }\r\n      );\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in text-to-speech conversion:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getVoices() {\r\n    try {\r\n      const response = await axios.get(`${ELEVENLABS_API_URL}/voices`, {\r\n        headers: {\r\n          'xi-api-key': this.apiKey\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching voices:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ElevenLabsService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,kBAAkB,GAAG,qDAAqD;AAChF,MAAMC,kBAAkB,GAAG,8BAA8B;AAEzD,MAAMC,iBAAiB,CAAC;EAItBC,WAAWA,CAAA,EAAG;IAAA,KAFdC,MAAM,GAAG,IAAI;IAGX,IAAI,CAACJ,kBAAkB,EAAE;MACvB,MAAM,IAAIK,KAAK,CAAC,sCAAsC,CAAC;IACzD;IACA,IAAI,CAACD,MAAM,GAAGJ,kBAAkB;EAClC;EAEA,OAAOM,WAAWA,CAAA,EAAG;IACnB,IAAI,CAACJ,iBAAiB,CAACK,QAAQ,EAAE;MAC/BL,iBAAiB,CAACK,QAAQ,GAAG,IAAIL,iBAAiB,CAAC,CAAC;IACtD;IACA,OAAOA,iBAAiB,CAACK,QAAQ;EACnC;EAEA,MAAMC,YAAYA,CAAC;IAAEC,IAAI;IAAEC,OAAO;IAAEC,OAAO,GAAG,uBAAuB;IAAEC,aAAa,GAAG;MACrFC,SAAS,EAAE,GAAG;MACdC,gBAAgB,EAAE,IAAI;MACtBC,KAAK,EAAE,GAAG;MACVC,iBAAiB,EAAE;IACrB;EAAC,CAAC,EAAE;IACF,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAC/B,GAAGjB,kBAAkB,mBAAmBS,OAAO,EAAE,EACjD;QACED,IAAI;QACJU,QAAQ,EAAER,OAAO;QACjBS,cAAc,EAAER;MAClB,CAAC,EACD;QACES,OAAO,EAAE;UACP,QAAQ,EAAE,YAAY;UACtB,YAAY,EAAE,IAAI,CAACjB,MAAM;UACzB,cAAc,EAAE;QAClB,CAAC;QACDkB,YAAY,EAAE;MAChB,CACF,CAAC;MAED,OAAOL,QAAQ,CAACM,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,SAASA,CAAA,EAAG;IAChB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMlB,KAAK,CAAC4B,GAAG,CAAC,GAAG1B,kBAAkB,SAAS,EAAE;QAC/DoB,OAAO,EAAE;UACP,YAAY,EAAE,IAAI,CAACjB;QACrB;MACF,CAAC,CAAC;MACF,OAAOa,QAAQ,CAACM,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;AACF;AA9DMtB,iBAAiB,CACdK,QAAQ,GAAG,IAAI;AA+DxB,eAAeL,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}