{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport ElevenLabsService from '../services/ElevenLabsService';\nexport const useElevenLabs = () => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [error, setError] = useState(null);\n  const [voices, setVoices] = useState([]);\n  const [isLoadingVoices, setIsLoadingVoices] = useState(false);\n  const [audioContext, setAudioContext] = useState(null);\n  const [currentSource, setCurrentSource] = useState(null);\n  const speak = useCallback(async (text, voiceId, settings) => {\n    try {\n      setIsSpeaking(true);\n      setError(null);\n      const elevenLabs = ElevenLabsService.getInstance();\n      const audioData = await elevenLabs.textToSpeech({\n        text,\n        voiceId,\n        voiceSettings: settings\n      });\n\n      // Create audio context if it doesn't exist\n      if (!audioContext) {\n        const newAudioContext = new (window.AudioContext || window.webkitAudioContext)();\n        setAudioContext(newAudioContext);\n      }\n\n      // Decode audio data\n      const audioBuffer = await audioContext.decodeAudioData(audioData);\n\n      // Create and play audio source\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(audioContext.destination);\n      source.start(0);\n      setCurrentSource(source);\n\n      // Handle audio completion\n      source.onended = () => {\n        setIsSpeaking(false);\n        setCurrentSource(null);\n      };\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      setIsSpeaking(false);\n    }\n  }, [audioContext]);\n  const stop = useCallback(() => {\n    if (currentSource) {\n      currentSource.stop();\n      setCurrentSource(null);\n    }\n    setIsSpeaking(false);\n  }, [currentSource]);\n  const loadVoices = useCallback(async () => {\n    try {\n      setIsLoadingVoices(true);\n      const elevenLabs = ElevenLabsService.getInstance();\n      const voicesData = await elevenLabs.getVoices();\n      setVoices(voicesData.voices || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load voices');\n    } finally {\n      setIsLoadingVoices(false);\n    }\n  }, []);\n  return {\n    isSpeaking,\n    error,\n    speak,\n    stop,\n    voices,\n    isLoadingVoices,\n    loadVoices\n  };\n};\n_s(useElevenLabs, \"0m7ReB+HjdBqWEEhPYZew3vt6ME=\");","map":{"version":3,"names":["useState","useCallback","ElevenLabsService","useElevenLabs","_s","isSpeaking","setIsSpeaking","error","setError","voices","setVoices","isLoadingVoices","setIsLoadingVoices","audioContext","setAudioContext","currentSource","setCurrentSource","speak","text","voiceId","settings","elevenLabs","getInstance","audioData","textToSpeech","voiceSettings","newAudioContext","window","AudioContext","webkitAudioContext","audioBuffer","decodeAudioData","source","createBufferSource","buffer","connect","destination","start","onended","err","Error","message","stop","loadVoices","voicesData","getVoices"],"sources":["C:/Users/hp/Desktop/NEXUS.DAWN/src/hooks/useElevenLabs.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport ElevenLabsService from '../services/ElevenLabsService';\r\n\r\nexport const useElevenLabs = () => {\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [voices, setVoices] = useState([]);\r\n  const [isLoadingVoices, setIsLoadingVoices] = useState(false);\r\n  const [audioContext, setAudioContext] = useState(null);\r\n  const [currentSource, setCurrentSource] = useState(null);\r\n\r\n  const speak = useCallback(async (text, voiceId, settings) => {\r\n    try {\r\n      setIsSpeaking(true);\r\n      setError(null);\r\n\r\n      const elevenLabs = ElevenLabsService.getInstance();\r\n      const audioData = await elevenLabs.textToSpeech({\r\n        text,\r\n        voiceId,\r\n        voiceSettings: settings\r\n      });\r\n\r\n      // Create audio context if it doesn't exist\r\n      if (!audioContext) {\r\n        const newAudioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        setAudioContext(newAudioContext);\r\n      }\r\n\r\n      // Decode audio data\r\n      const audioBuffer = await audioContext.decodeAudioData(audioData);\r\n\r\n      // Create and play audio source\r\n      const source = audioContext.createBufferSource();\r\n      source.buffer = audioBuffer;\r\n      source.connect(audioContext.destination);\r\n      source.start(0);\r\n      setCurrentSource(source);\r\n\r\n      // Handle audio completion\r\n      source.onended = () => {\r\n        setIsSpeaking(false);\r\n        setCurrentSource(null);\r\n      };\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'An error occurred');\r\n      setIsSpeaking(false);\r\n    }\r\n  }, [audioContext]);\r\n\r\n  const stop = useCallback(() => {\r\n    if (currentSource) {\r\n      currentSource.stop();\r\n      setCurrentSource(null);\r\n    }\r\n    setIsSpeaking(false);\r\n  }, [currentSource]);\r\n\r\n  const loadVoices = useCallback(async () => {\r\n    try {\r\n      setIsLoadingVoices(true);\r\n      const elevenLabs = ElevenLabsService.getInstance();\r\n      const voicesData = await elevenLabs.getVoices();\r\n      setVoices(voicesData.voices || []);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to load voices');\r\n    } finally {\r\n      setIsLoadingVoices(false);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    isSpeaking,\r\n    error,\r\n    speak,\r\n    stop,\r\n    voices,\r\n    isLoadingVoices,\r\n    loadVoices\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}