import React, { useState, useCallback, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useTheme } from '../contexts/ThemeContext';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, useGLTF } from '@react-three/drei';
import { EmotionData } from '../types/emotions';

interface FutureSelf {
  id: string;
  timestamp: number;
  visualization: string;
  insights: string[];
  patterns: string[];
  confidence: number;
}

export const MirrorOfBecoming: React.FC = () => {
  const { isCosmicMode } = useTheme();
  const [futureSelf, setFutureSelf] = useState<FutureSelf | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [insights, setInsights] = useState<string[]>([]);

  const generateFutureSelf = useCallback(async () => {
    setIsGenerating(true);
    try {
      // Simulate API call to generate future self visualization
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'You are an AI that generates insights about a person\'s future self based on their current patterns and behaviors.',
            },
            {
              role: 'user',
              content: 'Generate insights about my future self based on my current emotional patterns.',
            },
          ],
        }),
      });

      const data = await response.json();
      const newInsights = data.choices[0].message.content.split('\n').filter(Boolean);

      const newFutureSelf: FutureSelf = {
        id: Date.now().toString(),
        timestamp: Date.now(),
        visualization: 'future-self.glb', // This would be generated by Tavus
        insights: newInsights,
        patterns: ['Growth', 'Adaptation', 'Resilience'],
        confidence: 0.85,
      };

      setFutureSelf(newFutureSelf);
      setInsights(newInsights);
    } catch (error) {
      console.error('Error generating future self:', error);
    } finally {
      setIsGenerating(false);
    }
  }, []);

  const FutureSelfModel = () => {
    const { scene } = useGLTF('/models/future-self.glb');
    return <primitive object={scene} />;
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className={`p-6 rounded-xl ${
        isCosmicMode
          ? 'bg-gradient-to-br from-purple-900/50 to-blue-900/50'
          : 'bg-white dark:bg-gray-800'
      }`}
    >
      <h2 className="text-2xl font-bold text-gray-800 dark:text-white mb-6">
        Mirror of Becoming
      </h2>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="space-y-4">
          <div className="aspect-square rounded-lg overflow-hidden bg-gray-900">
            <Canvas camera={{ position: [0, 0, 5] }}>
              <ambientLight intensity={0.5} />
              <pointLight position={[10, 10, 10]} />
              <FutureSelfModel />
              <OrbitControls />
            </Canvas>
          </div>
        </div>

        <div className="space-y-6">
          <div className="p-4 rounded-lg bg-gray-100 dark:bg-gray-700">
            <h3 className="text-lg font-semibold mb-4 text-gray-800 dark:text-white">
              Oracle's Insights
            </h3>
            <div className="space-y-4">
              {insights.map((insight, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="p-3 rounded-lg bg-white dark:bg-gray-600 shadow-sm"
                >
                  <p className="text-gray-700 dark:text-gray-200">{insight}</p>
                </motion.div>
              ))}
            </div>
          </div>

          <div className="p-4 rounded-lg bg-gray-100 dark:bg-gray-700">
            <h3 className="text-lg font-semibold mb-4 text-gray-800 dark:text-white">
              Pattern Analysis
            </h3>
            <div className="flex flex-wrap gap-2">
              {futureSelf?.patterns.map((pattern, index) => (
                <span
                  key={index}
                  className="px-3 py-1 rounded-full bg-purple-500/20 text-purple-300"
                >
                  {pattern}
                </span>
              ))}
            </div>
          </div>

          <button
            onClick={generateFutureSelf}
            disabled={isGenerating}
            className={`w-full py-3 rounded-lg ${
              isCosmicMode
                ? 'bg-purple-600 hover:bg-purple-700'
                : 'bg-blue-600 hover:bg-blue-700'
            } text-white transition-colors`}
          >
            {isGenerating ? 'Generating...' : 'Generate Future Self'}
          </button>
        </div>
      </div>
    </motion.div>
  );
}; 